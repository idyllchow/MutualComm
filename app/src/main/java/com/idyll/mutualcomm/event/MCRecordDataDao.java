package com.idyll.mutualcomm.event;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MCRECORD_DATA".
*/
public class MCRecordDataDao extends AbstractDao<MCRecordData, String> {

    public static final String TABLENAME = "MCRECORD_DATA";

    /**
     * Properties of entity MCRecordData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, String.class, "_id", true, "_ID");
        public final static Property Event_detail = new Property(1, String.class, "event_detail", false, "EVENT_DETAIL");
        public final static Property Match_id = new Property(2, String.class, "match_id", false, "MATCH_ID");
        public final static Property Team_id = new Property(3, String.class, "team_id", false, "TEAM_ID");
        public final static Property Player_id = new Property(4, String.class, "player_id", false, "PLAYER_ID");
        public final static Property Code = new Property(5, String.class, "code", false, "CODE");
        public final static Property Event_location = new Property(6, String.class, "event_location", false, "EVENT_LOCATION");
        public final static Property Event_mode = new Property(7, String.class, "event_mode", false, "EVENT_MODE");
        public final static Property Has_assist = new Property(8, String.class, "has_assist", false, "HAS_ASSIST");
        public final static Property Client_event_id = new Property(9, String.class, "client_event_id", false, "CLIENT_EVENT_ID");
        public final static Property Client_started_at = new Property(10, String.class, "client_started_at", false, "CLIENT_STARTED_AT");
        public final static Property Client_ended_at = new Property(11, String.class, "client_ended_at", false, "CLIENT_ENDED_AT");
        public final static Property Client_match_clock = new Property(12, String.class, "client_match_clock", false, "CLIENT_MATCH_CLOCK");
        public final static Property State = new Property(13, String.class, "state", false, "STATE");
    };


    public MCRecordDataDao(DaoConfig config) {
        super(config);
    }
    
    public MCRecordDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MCRECORD_DATA\" (" + //
                "\"_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: _id
                "\"EVENT_DETAIL\" TEXT," + // 1: event_detail
                "\"MATCH_ID\" TEXT," + // 2: match_id
                "\"TEAM_ID\" TEXT," + // 3: team_id
                "\"PLAYER_ID\" TEXT," + // 4: player_id
                "\"CODE\" TEXT," + // 5: code
                "\"EVENT_LOCATION\" TEXT," + // 6: event_location
                "\"EVENT_MODE\" TEXT," + // 7: event_mode
                "\"HAS_ASSIST\" TEXT," + // 8: has_assist
                "\"CLIENT_EVENT_ID\" TEXT," + // 9: client_event_id
                "\"CLIENT_STARTED_AT\" TEXT," + // 10: client_started_at
                "\"CLIENT_ENDED_AT\" TEXT," + // 11: client_ended_at
                "\"CLIENT_MATCH_CLOCK\" TEXT," + // 12: client_match_clock
                "\"STATE\" TEXT);"); // 13: state
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MCRECORD_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MCRecordData entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.get_id());
 
        String event_detail = entity.getEvent_detail();
        if (event_detail != null) {
            stmt.bindString(2, event_detail);
        }
 
        String match_id = entity.getMatch_id();
        if (match_id != null) {
            stmt.bindString(3, match_id);
        }
 
        String team_id = entity.getTeam_id();
        if (team_id != null) {
            stmt.bindString(4, team_id);
        }
 
        String player_id = entity.getPlayer_id();
        if (player_id != null) {
            stmt.bindString(5, player_id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(6, code);
        }
 
        String event_location = entity.getEvent_location();
        if (event_location != null) {
            stmt.bindString(7, event_location);
        }
 
        String event_mode = entity.getEvent_mode();
        if (event_mode != null) {
            stmt.bindString(8, event_mode);
        }
 
        String has_assist = entity.getHas_assist();
        if (has_assist != null) {
            stmt.bindString(9, has_assist);
        }
 
        String client_event_id = entity.getClient_event_id();
        if (client_event_id != null) {
            stmt.bindString(10, client_event_id);
        }
 
        String client_started_at = entity.getClient_started_at();
        if (client_started_at != null) {
            stmt.bindString(11, client_started_at);
        }
 
        String client_ended_at = entity.getClient_ended_at();
        if (client_ended_at != null) {
            stmt.bindString(12, client_ended_at);
        }
 
        String client_match_clock = entity.getClient_match_clock();
        if (client_match_clock != null) {
            stmt.bindString(13, client_match_clock);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(14, state);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MCRecordData readEntity(Cursor cursor, int offset) {
        MCRecordData entity = new MCRecordData( //
            cursor.getString(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // event_detail
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // match_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // team_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // player_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // code
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // event_location
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // event_mode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // has_assist
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // client_event_id
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // client_started_at
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // client_ended_at
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // client_match_clock
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // state
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MCRecordData entity, int offset) {
        entity.set_id(cursor.getString(offset + 0));
        entity.setEvent_detail(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMatch_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTeam_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPlayer_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEvent_location(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEvent_mode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHas_assist(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setClient_event_id(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setClient_started_at(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setClient_ended_at(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setClient_match_clock(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setState(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(MCRecordData entity, long rowId) {
        return entity.get_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(MCRecordData entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
